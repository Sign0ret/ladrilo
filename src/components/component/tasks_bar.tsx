'use client'
import React, { useState } from 'react';

/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/Xzhcp9mLTpW
 */
import { ScrollArea } from "@/components/ui/scroll-area"
import { Button } from "@/components/ui/button"
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"
export function Tasks_bar() {
  const [clickedTask, setClickedTask] = useState<number | null>(null);

  const handleClick = (index: number) => {
    setClickedTask(index === clickedTask ? null : index);
  };
  const tasks = [
    { color: 'green-500', description: 'This is a description of the task.' },
    { color: 'yellow-500', description: 'This is a description of the task.' },
    { color: 'red-500', description: 'This is a description of the task.' },
    { color: 'green-500', description: 'This is a description of the task.' },
    { color: 'yellow-500', description: 'This is a description of the task.' },
    { color: 'red-500', description: 'This is a description of the task.' },
    { color: 'green-500', description: 'This is a description of the task.' },
    { color: 'green-500', description: 'This is a description of the task.' },
    { color: 'yellow-500', description: 'This is a description of the task.' },
    { color: 'red-500', description: 'This is a description of the task.' },
    { color: 'green-500', description: 'This is a description of the task.' },
    { color: 'yellow-500', description: 'This is a description of the task.' },
    { color: 'red-500', description: 'This is a description of the task.' },
    { color: 'green-500', description: 'This is a description of the task.' },
    { color: 'green-500', description: 'This is a description of the task.' },
    { color: 'yellow-500', description: 'This is a description of the task.' },
    { color: 'red-500', description: 'This is a description of the task.' },
    { color: 'green-500', description: 'This is a description of the task.' },
    { color: 'yellow-500', description: 'This is a description of the task.' },
    { color: 'red-500', description: 'This is a description of the task.' },
    { color: 'green-500', description: 'This is a description of the task.' },
    { color: 'green-500', description: 'This is a description of the task.' },
    { color: 'yellow-500', description: 'This is a description of the task.' },
    { color: 'red-500', description: 'This is a description of the task.' },
    { color: 'green-500', description: 'This is a description of the task.' },
    { color: 'yellow-500', description: 'This is a description of the task.' },
    { color: 'red-500', description: 'This is a description of the task.' },
    { color: 'green-500', description: 'This is a description of the task.' },
  ];
  return (
    <Card className="border-none min-w-full max-h-full overflow-y-auto no-scrollbar">
        <CardHeader className='sticky top-0 z-10 bg-inherit'>
            <CardTitle>
              <div className="flex items-center justify-between px-4 py-2">
                <h2 className="text-lg font-semibold">Tareas</h2>
                <TextIcon className="h-6 w-6" />
              </div>
            </CardTitle>
            {/* <CardDescription></CardDescription> */}
        </CardHeader>
        <CardContent>
        <div key="1" className="flex flex-col h-full w-64">
          <ScrollArea className="flex-1 py-2">
          <div className="px-4 space-y-4">
            {tasks.map((task, index) => (
              <div
                key={index}
                className={`flex items-start gap-2 p-2 ${
                  clickedTask === index ? 'bg-gray-300' : 'hover:bg-gray-200'
                }`}
                onClick={() => handleClick(index)}
              >
                <span className={`flex h-2 w-2 rounded-full bg-${task.color}`} />
                <input
                  type="text" 
                  className="text-sm text-gray-500 dark:text-gray-400 outline-none border-none"
                  value={task.description}
                  readOnly
                />
              </div>
            ))}
          </div>
          </ScrollArea>
          
        </div>
        </CardContent>
        <CardFooter className='sticky bottom-0 z-10 bg-inherit'>
            <Button className="w-full" size="sm">
              Add Task
            </Button>
        </CardFooter>
    </Card>
    
  )
}

interface IconProps extends React.SVGProps<SVGSVGElement> {
  className?: string;
}
function TextIcon({ className, ...rest }: IconProps) {
  return (
    <svg
      {...rest}
      className={className}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M17 6.1H3" />
      <path d="M21 12.1H3" />
      <path d="M15.1 18H3" />
    </svg>
  )
}
