'use client'
import React, { useState } from 'react';

/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/Xzhcp9mLTpW
 */
import { Button } from "@/components/ui/button"
import {
    Card,
    CardContent,
    CardDescription,
    CardFooter,
    CardHeader,
    CardTitle,
  } from "@/components/ui/card"
  import {
    Dialog,
    DialogContent,
    DialogDescription,
    DialogHeader,
    DialogTitle,
    DialogTrigger,
  } from "@/components/ui/dialog"
  import { Progress } from "@/components/ui/progress"
import { Label } from "@/components/ui/label"
import { SelectValue, SelectTrigger, SelectItem, SelectContent, Select } from "@/components/ui/select"
import { Textarea } from "@/components/ui/textarea"
import { Input } from "@/components/ui/input"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Tarea } from '../tarea';
export function Tareas_sidebar() {
  // Tasks
  const [clickedTask, setClickedTask] = useState<number | null>(null);
  const [hoveredTask, setHoveredTask] = useState<number | null>(null);
  const handleClick = (index: number) => {
    setClickedTask(index === clickedTask ? null : index);
  };
  const tasks = [
    { color: 'green-500', description: 'This is a description of the task.' },
    { color: 'yellow-500', description: 'This is a description of the task.' },
    { color: 'red-500', description: 'This is a description of the task.' },

  ];
  return (
    <section>
        <CardContent>
            <div key="1" className="flex flex-col h-full w-64">
                <ScrollArea className="flex-1 py-2">
                <div className="px-4 space-y-4">
                    {tasks.map((task, index) => (
                        <Tarea key={`${index}-tarea`} tarea={task} />
                    ))}
                </div>
                </ScrollArea>
                
            </div>
        </CardContent>
        <CardFooter className='sticky bottom-0 z-10 bg-background'>
            <Dialog>
                <DialogTrigger>
                    <Button className="w-full" size="sm">
                        Add Task
                    </Button>
                </DialogTrigger>
                <DialogContent>
                    <DialogHeader>
                    <DialogTitle>Are you absolutely sure?</DialogTitle>
                    <DialogDescription>
                        <div className="space-y-2">
                            <h4 className="font-medium leading-none">Edit Task</h4>
                            <div className="grid gap-2">
                            <div className="space-y-1">
                            <Label htmlFor="person-assigned">Person Assigned</Label>
                            <Select defaultValue="Select person">
                                <SelectTrigger className="w-full">
                                <SelectValue placeholder="Select person" />
                                </SelectTrigger>
                                <SelectContent>
                                <SelectItem value="Person 1">Person 1</SelectItem>
                                <SelectItem value="Person 2">Person 2</SelectItem>
                                <SelectItem value="Person 3">Person 3</SelectItem>
                                </SelectContent>
                            </Select>
                            </div>
                            <div className="space-y-1">
                            <Label htmlFor="task-description">Task Description</Label>
                            <Textarea
                                className="h-32"
                                defaultValue="This is a placeholder task description. It's meant to give you an idea of how this component will look with your actual task description."
                                id="task-description"
                            />
                            </div>
                            <div className="space-y-1">
                            <Label className="flex justify-between items-center w-full" htmlFor="task-status">
                                Task Status
                                <Progress className="w-1/2" value={44} />
                            </Label>
                            <Select defaultValue="Select status">
                                <SelectTrigger className="w-full">
                                <SelectValue placeholder="Select status" />
                                </SelectTrigger>
                                <SelectContent>
                                <SelectItem value="Assigned">Assigned</SelectItem>
                                <SelectItem value="Doing">Doing</SelectItem>
                                <SelectItem value="Done">Done</SelectItem>
                                <SelectItem value="Reviewed">Reviewed</SelectItem>
                                <SelectItem value="Archived">Archived</SelectItem>
                                </SelectContent>
                            </Select>
                            </div>
                            <div className="space-y-1">
                            <Label htmlFor="delivery-date">Delivery Date</Label>
                            <Input className="w-full" id="delivery-date" type="date" />
                            </div>
                            <Button className="w-full">Save Changes</Button>
                        </div>
                        </div>
                    </DialogDescription>
                    </DialogHeader>
                </DialogContent>
            </Dialog>
        </CardFooter>
    </section>
    
  )
}
interface IconProps extends React.SVGProps<SVGSVGElement> {
    className?: string;
  }
function MessageCircleIcon({ className, ...rest }: IconProps) {
    return (
      <svg
        {...rest}
        className={className}
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
      >
        <path d="m3 21 1.9-5.7a8.5 8.5 0 1 1 3.8 3.8z" />
      </svg>
    )
  }
  
  
  function BellIcon({ className, ...rest }: IconProps) {
    return (
      <svg
        {...rest}
        className={className}
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
      >
        <path d="M6 8a6 6 0 0 1 12 0c0 7 3 9 3 9H3s3-2 3-9" />
        <path d="M10.3 21a1.94 1.94 0 0 0 3.4 0" />
      </svg>
    )
  }
  

function PencilIcon({ className, ...rest }: IconProps) {
    return (
      <svg
        {...rest}
        className={className}
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
      >
        <path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z" />
        <path d="m15 5 4 4" />
      </svg>
    )
  }

  function TextIcon({ className, ...rest }: IconProps) {
    return (
      <svg
        {...rest}
        className={className}
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
      >
        <path d="M17 6.1H3" />
        <path d="M21 12.1H3" />
        <path d="M15.1 18H3" />
      </svg>
    )
  }

  function XIcon({ className, ...rest }: IconProps) {
    return (
      <svg
        {...rest}
        className={className}
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
      >
        <path d="M18 6 6 18" />
        <path d="m6 6 12 12" />
      </svg>
    )
  }